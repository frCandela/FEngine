#include "core/fanDebug.hpp"

#include <iostream>
#include "core/fanBits.hpp"

namespace fan
{
    //==================================================================================================================================================================================================
    //==================================================================================================================================================================================================
    Debug::Debug()
    {
        mCurrentSeverity   = Severity::Log;
        mCurrentType       = Type::Default;
        mTypesPrintedToStd = ~0;
        BIT_CLEAR( mTypesPrintedToStd, (int)Debug::Type::Render );
        BIT_CLEAR( mTypesPrintedToStd, (int)Debug::Type::Resources );
    }

    //==================================================================================================================================================================================================
    //==================================================================================================================================================================================================
    void Debug::Flush()
    {
        // Push the log into the buffer
        LogItem item;
        item.mMessage  = mStringstream.str();
        item.mSeverity = mCurrentSeverity;
        item.mType     = mCurrentType;
        item.mTime     = System::GetTime();
        mLogBuffer.push_back( item );

        // stdio
        if( BIT_TRUE( mTypesPrintedToStd, (int)item.mType ) )
        {
            std::cout << Debug::SecondsToString( item.mTime );
            switch( mCurrentSeverity )
            {
                case Severity::Log:
                {
                    std::cout << "[LOG]";
                }
                    break;
                case Severity::Warning:
                {
                    std::cout << "[WARNING]";
                }
                    break;
                case Severity::Error:
                {
                    std::cout << "[ERROR]";
                }
                    break;
                case Severity::Highlight:
                {
                    std::cout << "[HIGH]";
                }
                    break;
                default:
                    fanAssert( false );
                    break;
            }
            std::cout << " " << mStringstream.str().c_str() << std::endl;
        }
        mStringstream.str( "" ); // clear
        mCurrentSeverity = Severity::Log;
        mCurrentType     = Type::Default;
        mOnNewLog.Emmit( item );
    }

    //==================================================================================================================================================================================================
    //==================================================================================================================================================================================================
    void Debug::Log( const std::string _message, const Type _type )
    {
        Get() << _type << Severity::Log << _message << Debug::Endl();
    }

    //==================================================================================================================================================================================================
    //==================================================================================================================================================================================================
    void Debug::Warning( const std::string _message, const Type _type )
    {
        Get() << _type << Severity::Warning << _message << Debug::Endl();
    }

    //==================================================================================================================================================================================================
    //==================================================================================================================================================================================================
    void Debug::Error( const std::string _message, const Type _type )
    {
        Get() << _type << Severity::Error << _message << Debug::Endl();
    }

    //==================================================================================================================================================================================================
    //==================================================================================================================================================================================================
    void Debug::Highlight( const std::string _message, const Type _type )
    {
        Get() << _type << Severity::Highlight << _message << Debug::Endl();
    }

    //==================================================================================================================================================================================================
    //==================================================================================================================================================================================================
    Debug& Debug::Log()
    {
        Get() << Debug::Severity::Log;
        return Get();
    }
    Debug& Debug::Warning()
    {
        Get() << Debug::Severity::Warning;
        return Get();
    }
    Debug& Debug::Error()
    {
        Get() << Debug::Severity::Error;
        return Get();
    }
    Debug& Debug::Highlight()
    {
        Get() << Debug::Severity::Highlight;
        return Get();
    }

    //==================================================================================================================================================================================================
    //==================================================================================================================================================================================================
    void Debug::Clear() { Get().mLogBuffer.clear(); }

    //==================================================================================================================================================================================================
    // Returns a hours:minuts:seconds ex: 3783s = 01:02:03
    //==================================================================================================================================================================================================
    std::string Debug::SecondsToString( const double _seconds )
    {
        std::stringstream ss;
        unsigned          remainingSeconds = static_cast<unsigned>( _seconds );

        const unsigned hours = remainingSeconds / 3600;
        remainingSeconds -= hours * 3600;
        ss << '[';
        if( hours < 10 )
        {
            ss << '0';
        }
        ss << hours << ':';

        const unsigned minuts = remainingSeconds / 60;
        remainingSeconds -= minuts * 60;
        if( minuts < 10 )
        {
            ss << 0;
        }
        ss << minuts << ':';

        const unsigned seconds = remainingSeconds;
        if( seconds < 10 )
        {
            ss << '0';
        }
        ss << seconds << ']';
        return ss.str();
    }
}