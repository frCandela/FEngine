#include "render/fanWindow.hpp"
#include "engine/resources/fanCursor.hpp"
#include "core/fanDebug.hpp"
#include "core/input/fanInput.hpp"
#include "render/resources/fanTexture.hpp"

namespace fan
{
    Window::GetWindowUserPtrFunc Window::sGetWindowUserPtr = &glfwGetWindowUserPointer;

    //==================================================================================================================================================================================================
    //==================================================================================================================================================================================================
    Window::Window( const std::string& _name, const glm::ivec2 _position, const glm::ivec2 _size, const std::string _iconPath )
    {
        mInstance.Create( &mDevice.mDebugNames );

        glm::ivec2 position = _position;
        glm::ivec2 size     = _size;
        if( !ValidSize( size ) )
        {
            size     = GetDefaultSize();
            position = GetDefaultPosition();
        }

        CreateGLFWWIndow( _name.c_str(), position, size );
        SetIcon( _iconPath );

        mDevice.Create( mInstance, mSurface );

        mSwapchain.Create( mDevice, mSurface, { (uint32_t)size.x, (uint32_t)size.y } );

        Input::Get().Setup( mWindow );
        mInputData.mMouse.Clear();
        glfwSetWindowUserPointer( mWindow, &mInputData );
        mInputData.mWindow = mWindow;
        fanAssert( glfwGetWindowUserPointer( mWindow ) == &mInputData );

        mArrowCursor.CreateStandard( GLFW_ARROW_CURSOR );
    }

    //==================================================================================================================================================================================================
    //==================================================================================================================================================================================================
    Window::~Window()
    {
        Destroy();
    }

    //==================================================================================================================================================================================================
    //==================================================================================================================================================================================================
    bool Window::SetIcon( const std::string& _path )
    {
        Texture iconTexture;
        if( iconTexture.LoadFromFile( _path ) )
        {
            GLFWimage image = { (int)iconTexture.mExtent.width, (int)iconTexture.mExtent.height, iconTexture.mPixels };
            glfwSetWindowIcon( mWindow, 1, &image );
            iconTexture.FreePixels();
            return true;
        }
        return false;
    }

    //==================================================================================================================================================================================================
    //==================================================================================================================================================================================================
    void Window::SetCursor( const Cursor& _cursor )
    {
        glfwSetCursor( mWindow, _cursor.mCursor );
    }

    //==================================================================================================================================================================================================
    //==================================================================================================================================================================================================
    void Window::SetPosition( const glm::ivec2 _position )
    {
        glfwSetWindowPos( mWindow, _position.x, _position.y );
    }

    //==================================================================================================================================================================================================
    //==================================================================================================================================================================================================
    void Window::SetSize( const glm::ivec2 _size )
    {
        glm::ivec2 size = _size;
        if( !ValidSize( _size ) )
        {
            size = GetDefaultSize();
        }
        glfwSetWindowSize( mWindow, size.x, size.y );
    }

    //==================================================================================================================================================================================================
    //==================================================================================================================================================================================================
    bool Window::ValidSize( const glm::ivec2 _size )
    {
        return _size.x > 0 && _size.y > 0;
    }

    //==================================================================================================================================================================================================
    //==================================================================================================================================================================================================
    glm::ivec2 Window::GetDefaultSize()
    {
        GLFWmonitor* monitor = glfwGetPrimaryMonitor();
        int x, y, w, h;
        glfwGetMonitorWorkarea( monitor, &x, &y, &w, &h );
        return glm::ivec2( w, h - 30 );
    }

    //==================================================================================================================================================================================================
    //==================================================================================================================================================================================================
    glm::ivec2 Window::GetDefaultPosition()
    {
        GLFWmonitor* monitor = glfwGetPrimaryMonitor();
        int x, y, w, h;
        glfwGetMonitorWorkarea( monitor, &x, &y, &w, &h );
        return glm::ivec2( x, y + 30 );
    }

    //==================================================================================================================================================================================================
    //==================================================================================================================================================================================================
    void Window::SetFullscreen()
    {
        GLFWmonitor* monitor = glfwGetPrimaryMonitor();
        int x, y, w, h;
        glfwGetMonitorWorkarea( monitor, &x, &y, &w, &h );
        glfwSetWindowMonitor( mWindow, monitor, x, y, w, h, GLFW_DONT_CARE );
    }

    //==================================================================================================================================================================================================
    //==================================================================================================================================================================================================
    void Window::SetWindowed( const glm::ivec2 _position, const glm::ivec2 _size )
    {
        glm::ivec2 pos = _position, size = _size;
        if( !ValidSize( size ) )
        {
            pos  = GetDefaultPosition();
            size = GetDefaultSize();
        }
        glfwSetWindowMonitor( mWindow, nullptr, pos.x, pos.y, size.x, size.y, GLFW_DONT_CARE );
    }

    //==================================================================================================================================================================================================
    //==================================================================================================================================================================================================
    void Window::CreateGLFWWIndow( const std::string& _name, const glm::ivec2 _position, const glm::ivec2 _size )
    {
        glfwWindowHint( GLFW_CLIENT_API, GLFW_NO_API );
        glfwWindowHint( GLFW_RESIZABLE, GLFW_TRUE );
        mWindow = glfwCreateWindow( _size.x, _size.y, _name.c_str(), nullptr/* fullscreen monitor */, nullptr );
        glfwCreateWindowSurface( mInstance.mInstance, mWindow, nullptr, &mSurface );
        Debug::Log() << Debug::Type::Render << std::hex << "VkSurfaceKHR          " << mSurface << std::dec << Debug::Endl();
        glfwSetWindowPos( mWindow, _position.x, _position.y );
        glfwSetWindowSize( mWindow, _size.x, _size.y );
        glfwSetWindowPos( mWindow, _position.x, _position.y );
    }

    //==================================================================================================================================================================================================
    //==================================================================================================================================================================================================
    void Window::Destroy()
    {
        mSwapchain.Destroy( mDevice );
        mDevice.Destroy();
        DestroyWindow();
        mInstance.Destroy();
        glfwTerminate();
    }

    //==================================================================================================================================================================================================
    //==================================================================================================================================================================================================
    void Window::DestroyWindow()
    {
        vkDestroySurfaceKHR( mInstance.mInstance, mSurface, nullptr );
        mSurface = VK_NULL_HANDLE;
        glfwDestroyWindow( mWindow );
    }

    //==================================================================================================================================================================================================
    //==================================================================================================================================================================================================
    Window::InputData& Window::GetInputData( GLFWwindow* _window )
    {
        fanAssert( _window != nullptr );
        void* data = ( *Window::sGetWindowUserPtr )( _window );
        fanAssert( data != nullptr );
        return *static_cast<InputData*>(data);
    }

    //==================================================================================================================================================================================================
    //==================================================================================================================================================================================================
    bool Window::IsOpen() const
    {
        return !glfwWindowShouldClose( mWindow );
    }

    //==================================================================================================================================================================================================
    //==================================================================================================================================================================================================
    bool Window::IsFullscreen() const
    {
        return glfwGetWindowMonitor( mWindow ) != nullptr;
    }

    //==================================================================================================================================================================================================
    //==================================================================================================================================================================================================
    VkExtent2D Window::GetExtent() const
    {
        int width;
        int height;
        glfwGetFramebufferSize( mWindow, &width, &height );
        return { static_cast< uint32_t >( width ), static_cast< uint32_t >( height ) };
    }

    //==================================================================================================================================================================================================
    //==================================================================================================================================================================================================
    glm::ivec2 Window::GetSize() const
    {
        const VkExtent2D extent = GetExtent();
        return glm::ivec2( extent.width, extent.height );
    }

    //==================================================================================================================================================================================================
    //==================================================================================================================================================================================================
    glm::ivec2 Window::GetPosition() const
    {
        glm::ivec2 position;
        glfwGetWindowPos( mWindow, &position.x, &position.y );
        return position;
    }
}
