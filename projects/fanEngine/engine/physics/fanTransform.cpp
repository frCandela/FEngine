#include "fanTransform.hpp"
#include "core/memory/fanSerializable.hpp"

namespace fan
{
    const Transform Transform::sIdentity = Transform::Make( Quaternion::sIdentity, Vector3::sZero );

    //==================================================================================================================================================================================================
    //==================================================================================================================================================================================================
    void Transform::SetInfo( EcsComponentInfo& _info )
    {
        _info.save = &Transform::Save;
        _info.load = &Transform::Load;
    }

    //==================================================================================================================================================================================================
    //==================================================================================================================================================================================================
    void Transform::Init( EcsWorld& /*_world*/, EcsEntity /*_entity*/, EcsComponent& _component )
    {
        Transform& transform = static_cast<Transform&>( _component );
        transform.mRotation = Quaternion::sIdentity;
        transform.mPosition = Vector3::sZero;
    }

    //==================================================================================================================================================================================================
    //==================================================================================================================================================================================================
    void Transform::Save( const EcsComponent& _component, Json& _json )
    {
        const Transform& transform = static_cast<const Transform&>( _component );

        Serializable::SaveVec3( _json, "position", transform.mPosition );
        Serializable::SaveQuat( _json, "rotation", transform.mRotation );
    }

    //==================================================================================================================================================================================================
    //==================================================================================================================================================================================================
    void Transform::Load( EcsComponent& _component, const Json& _json )
    {
        Transform& transform = static_cast<Transform&>( _component );
        Serializable::LoadVec3( _json, "position", transform.mPosition );
        Serializable::LoadQuat( _json, "rotation", transform.mRotation );
    }

    //==================================================================================================================================================================================================
    //==================================================================================================================================================================================================
    Transform Transform::Make( const Quaternion& _rotation, const Vector3& _position )
    {
        Transform transform;
        transform.mRotation = _rotation;
        transform.mPosition = _position;
        return transform;
    }

    //==================================================================================================================================================================================================
    //==================================================================================================================================================================================================
    glm::mat4 Transform::GetModelMatrix( const Vector3& _scale ) const
    {
        glm::vec3 position = mPosition.ToGlm();
        glm::vec3 glmScale = _scale.ToGlm();
        glm::quat rotation = mRotation.ToGlm();

        return glm::translate( glm::mat4( 1.f ), position ) *
               glm::mat4_cast( rotation ) *
               glm::scale( glm::mat4( 1.f ), glmScale );
    }

    //==================================================================================================================================================================================================
    //==================================================================================================================================================================================================
    glm::mat4 Transform::GetNormalMatrix( const Vector3& _scale ) const
    {
        return glm::transpose( glm::inverse( GetModelMatrix( _scale ) ) );
    }

    //==================================================================================================================================================================================================
    //==================================================================================================================================================================================================
    void Transform::LookAt( const Vector3& _point, const Vector3& _up )
    {
        const Vector3 forward = ( _point - mPosition ).Normalized();
        mRotation = Quaternion::LookRotation( forward, _up );
    }

    //==================================================================================================================================================================================================
    //==================================================================================================================================================================================================
    Transform Transform::Inverse() const
    {
        Transform inverse;
        inverse.mRotation = mRotation.Inverse();
        inverse.mPosition = -( inverse.mRotation * mPosition );
        return inverse;
    }

    //==================================================================================================================================================================================================
    //==================================================================================================================================================================================================
    Vector3 Transform::TransformPoint( const Vector3 _point ) const
    {
        return mRotation * _point + mPosition;
    }

    //==================================================================================================================================================================================================
    //==================================================================================================================================================================================================
    Vector3 Transform::InverseTransformPoint( const Vector3 _point ) const
    {
        return mRotation.Inverse() * ( _point - mPosition );
    }

    //==================================================================================================================================================================================================
    // No translation applied
    //==================================================================================================================================================================================================
    Vector3 Transform::TransformDirection( const Vector3 _point ) const
    {
        return mRotation * _point;
    }

    //==================================================================================================================================================================================================
    // No translation applied
    //========================================================================================================*
    Vector3 Transform::InverseTransformDirection( const Vector3 _point ) const
    {
        return mRotation.Inverse() * _point;
    }
}