#include "engine/terrain/fanVoxelGeneration.hpp"
#include "engine/terrain/fanVoxelTerrain.hpp"
#include "core/math/fanMathUtils.hpp"

namespace fan
{
    //==================================================================================================================================================================================================
    //==================================================================================================================================================================================================
    void VoxelGenerator::Initialize()
    {
        mSeed         = 42;
        mSimplexNoise = SimplexNoise( mSeed );
        mThreshold    = FIXED( 0.5 );
        m3DOctaves[0] = m3DOctaves[1] = m2DOctave = {};
        mClearSides = false;
    }

    //==================================================================================================================================================================================================
    //==================================================================================================================================================================================================
    void VoxelGenerator::GenerateBlocks( const VoxelTerrain& _terrain, VoxelChunk& _chunk )
    {
        //ScopedTimer timerTotal( "terrain blocks generation" );

        _chunk.mIsGenerated = true;

        const VoxelGenerator& generator = _terrain.mGenerator;
        const glm::ivec3 maxPosition = VoxelChunk::sSize * _terrain.mSize - glm::ivec3 { 1, 1, 1 };
        const Vector3    maxSize     = Math::ToFixed( maxPosition );
        const Vector3    center      = Math::ToFixed( maxPosition ) / 2;
        for( int         x           = 0; x < VoxelChunk::sSize; ++x )
        {
            for( int y = 0; y < VoxelChunk::sSize; ++y )
            {
                for( int z = 0; z < VoxelChunk::sSize; ++z )
                {
                    const Vector3 chunkOffset    = VoxelChunk::sSize * Vector3( _chunk.mPosition.x, _chunk.mPosition.y, _chunk.mPosition.z );
                    const Vector3 globalPosition = chunkOffset + Vector3( x, y, z );

                    Fixed         simplexVal3D0  = 1 + FIXED( 0.5 ) * generator.mSimplexNoise.Noise( generator.m3DOctaves[0].mFrequency * globalPosition );
                    Fixed         simplexVal3D1  = 1 + FIXED( 0.5 ) * generator.mSimplexNoise.Noise( generator.m3DOctaves[1].mFrequency * globalPosition );
                    Fixed         simplexVal2D   = 1 + FIXED( 0.5 ) * generator.mSimplexNoise.Noise( globalPosition.x * generator.m2DOctave.mFrequency, globalPosition.z * generator.m2DOctave.mFrequency  );

                    simplexVal3D0 *= generator.m3DOctaves[0].mAmplitude;
                    simplexVal3D1 *= generator.m3DOctaves[1].mAmplitude;
                    simplexVal2D *= generator.m2DOctave.mAmplitude;

                    Fixed         heightRatio    = globalPosition.y / maxPosition.y;
                    simplexVal3D0 *= 1 - generator.m3DOctaves[0].mHeightWeight * heightRatio;
                    simplexVal3D1 *= 1 - generator.m3DOctaves[0].mHeightWeight * heightRatio;

                    simplexVal3D0 += generator.m3DOctaves[0].mHeightOffset;
                    simplexVal3D1 += generator.m3DOctaves[1].mHeightOffset;
                    simplexVal2D  += generator.m2DOctave.mHeightOffset;

                    Fixed simplexVal = generator.m2DOctave.mWeight * ( 1 + FIXED(0.5) * simplexVal2D - globalPosition.y / maxSize.y + generator.m2DOctave.mHeightOffset)
                                       + generator.m3DOctaves[0].mWeight * simplexVal3D0
                                       + generator.m3DOctaves[1].mWeight * simplexVal3D1;

                    _chunk.mVoxels[x][y][z] = simplexVal > generator.mThreshold;

                    if( !generator.mClearSides )
                    {
                        const glm::ivec3 gPos = VoxelChunk::sSize * glm::ivec3( _chunk.mPosition.x, _chunk.mPosition.y, _chunk.mPosition.z ) + glm::ivec3( x, y, z );
                        if( gPos.x == 0 || gPos.y == 0 || gPos.z == 0 || gPos.x == maxPosition.x || gPos.y == maxPosition.y || gPos.z == maxPosition.z )
                        {
                            _chunk.mVoxels[x][y][z] = false;
                        }
                    }
                }
            }
        }
    }

    //==================================================================================================================================================================================================
    //==================================================================================================================================================================================================
    void VoxelGenerator::GenerateVertices( const int _caseID, const Vector3 offset, std::vector<Vertex>& _vertices )
    {
        const int numPolys = sCaseToNumPolys[_caseID];
        for( int  i        = 0; i < numPolys; ++i )
        {
            const int8_t* triangleIndices = sEdgeConnectList[_caseID][i];
            Vector3   v0       = offset + sEdges[triangleIndices[0]];
            Vector3   v1       = offset + sEdges[triangleIndices[1]];
            Vector3   v2       = offset + sEdges[triangleIndices[2]];
            Vector3   fxNormal = Vector3::Cross( ( v1 - v2 ), ( v0 - v2 ) ).FastNormalized();
            glm::vec3 normal   = Math::ToGLM( fxNormal );

            _vertices.push_back( { Math::ToGLM( v0 ), normal, Color::sWhite.ToGLM(), { 0, 0 } } );
            _vertices.push_back( { Math::ToGLM( v2 ), normal, Color::sWhite.ToGLM(), { 0, 0 } } );
            _vertices.push_back( { Math::ToGLM( v1 ), normal, Color::sWhite.ToGLM(), { 0, 0 } } );
        }
    }

    //==================================================================================================================================================================================================
    //==================================================================================================================================================================================================
    void GenerateLocalVoxels( VoxelChunk& _chunk, Mesh& _mesh )
    {
        for( int x = 0; x < VoxelChunk::sSize - 1; ++x )
        {
            for( int y = 0; y < VoxelChunk::sSize - 1; ++y )
            {
                for( int z = 0; z < VoxelChunk::sSize - 1; ++z )
                {
                    const int caseID = _chunk.mVoxels[x + 1][y + 0][z + 0] << 0 |
                                       _chunk.mVoxels[x + 1][y + 1][z + 0] << 1 |
                                       _chunk.mVoxels[x + 0][y + 1][z + 0] << 2 |
                                       _chunk.mVoxels[x + 0][y + 0][z + 0] << 3 |
                                       _chunk.mVoxels[x + 1][y + 0][z + 1] << 4 |
                                       _chunk.mVoxels[x + 1][y + 1][z + 1] << 5 |
                                       _chunk.mVoxels[x + 0][y + 1][z + 1] << 6 |
                                       _chunk.mVoxels[x + 0][y + 0][z + 1] << 7;
                    VoxelGenerator::GenerateVertices( caseID, Vector3( x, y, z ), _mesh.mVertices );
                }
            }
        }
    }

    //==================================================================================================================================================================================================
    //==================================================================================================================================================================================================
    void GenerateLeftVoxels( const VoxelChunk& _leftChunk, VoxelChunk& _chunk, Mesh& _mesh )
    {
        for( int y = 0; y < VoxelChunk::sSize - 1; ++y )
        {
            for( int z = 0; z < VoxelChunk::sSize - 1; ++z )
            {
                const int x      = VoxelChunk::sSize - 1;
                const int caseID = _leftChunk.mVoxels[0][y + 0][z + 0] << 0 |
                                   _leftChunk.mVoxels[0][y + 1][z + 0] << 1 |
                                   _chunk.mVoxels[x][y + 1][z + 0] << 2 |
                                   _chunk.mVoxels[x][y + 0][z + 0] << 3 |
                                   _leftChunk.mVoxels[0][y + 0][z + 1] << 4 |
                                   _leftChunk.mVoxels[0][y + 1][z + 1] << 5 |
                                   _chunk.mVoxels[x][y + 1][z + 1] << 6 |
                                   _chunk.mVoxels[x][y + 0][z + 1] << 7;
                VoxelGenerator::GenerateVertices( caseID, Vector3( x, y, z ), _mesh.mVertices );
            }
        }
    }

    //==================================================================================================================================================================================================
    //==================================================================================================================================================================================================
    void GenerateTopVoxels( const VoxelChunk& _topChunk, VoxelChunk& _chunk, Mesh& _mesh )
    {
        for( int x = 0; x < VoxelChunk::sSize - 1; ++x )
        {
            for( int z = 0; z < VoxelChunk::sSize - 1; ++z )
            {
                const int y      = VoxelChunk::sSize - 1;
                const int caseID = _chunk.mVoxels[x + 1][y][z + 0] << 0 |
                                   _topChunk.mVoxels[x + 1][0][z + 0] << 1 |
                                   _topChunk.mVoxels[x + 0][0][z + 0] << 2 |
                                   _chunk.mVoxels[x + 0][y][z + 0] << 3 |
                                   _chunk.mVoxels[x + 1][y][z + 1] << 4 |
                                   _topChunk.mVoxels[x + 1][0][z + 1] << 5 |
                                   _topChunk.mVoxels[x + 0][0][z + 1] << 6 |
                                   _chunk.mVoxels[x + 0][y][z + 1] << 7;
                VoxelGenerator::GenerateVertices( caseID, Vector3( x, y, z ), _mesh.mVertices );
            }
        }
    }

    //==================================================================================================================================================================================================
    //==================================================================================================================================================================================================
    void GenerateForwardVoxels( const VoxelChunk& _forwardChunk, VoxelChunk& _chunk, Mesh& _mesh )
    {
        for( int x = 0; x < VoxelChunk::sSize - 1; ++x )
        {
            for( int y = 0; y < VoxelChunk::sSize - 1; ++y )
            {
                const int z      = VoxelChunk::sSize - 1;
                const int caseID = _chunk.mVoxels[x + 1][y + 0][z] << 0 |
                                   _chunk.mVoxels[x + 1][y + 1][z] << 1 |
                                   _chunk.mVoxels[x + 0][y + 1][z] << 2 |
                                   _chunk.mVoxels[x + 0][y + 0][z] << 3 |
                                   _forwardChunk.mVoxels[x + 1][y + 0][0] << 4 |
                                   _forwardChunk.mVoxels[x + 1][y + 1][0] << 5 |
                                   _forwardChunk.mVoxels[x + 0][y + 1][0] << 6 |
                                   _forwardChunk.mVoxels[x + 0][y + 0][0] << 7;
                VoxelGenerator::GenerateVertices( caseID, Vector3( x, y, z ), _mesh.mVertices );
            }
        }
    }

    //==================================================================================================================================================================================================
    //==================================================================================================================================================================================================
    void GenerateLeftTopVoxels( const VoxelChunk& _leftChunk, const VoxelChunk& _topChunk, const VoxelChunk& _leftTopChunk, VoxelChunk& _chunk, Mesh& _mesh )
    {

        for( int z = 0; z < VoxelChunk::sSize - 1; ++z )
        {
            const int xy     = VoxelChunk::sSize - 1;
            const int caseID = _leftChunk.mVoxels[0][xy + 0][z + 0] << 0 |
                               _leftTopChunk.mVoxels[0][0][z + 0] << 1 |
                               _topChunk.mVoxels[xy][0][z + 0] << 2 |
                               _chunk.mVoxels[xy][xy][z + 0] << 3 |
                               _leftChunk.mVoxels[0][xy][z + 1] << 4 |
                               _leftTopChunk.mVoxels[0][0][z + 1] << 5 |
                               _topChunk.mVoxels[xy][0][z + 1] << 6 |
                               _chunk.mVoxels[xy][xy][z + 1] << 7;
            VoxelGenerator::GenerateVertices( caseID, Vector3( xy, xy, z ), _mesh.mVertices );
        }
    }

    //==================================================================================================================================================================================================
    //==================================================================================================================================================================================================
    void GenerateLeftForwardVoxels( const VoxelChunk& _leftChunk, const VoxelChunk& _forwardChunk, const VoxelChunk& _leftForwardChunk, VoxelChunk& _chunk, Mesh& _mesh )
    {
        for( int y = 0; y < VoxelChunk::sSize - 1; ++y )
        {
            const int xz     = VoxelChunk::sSize - 1;
            const int caseID = _leftChunk.mVoxels[0][y + 0][xz] << 0 |
                               _leftChunk.mVoxels[0][y + 1][xz] << 1 |
                               _chunk.mVoxels[xz][y + 1][xz] << 2 |
                               _chunk.mVoxels[xz][y + 0][xz] << 3 |
                               _leftForwardChunk.mVoxels[0][y + 0][0] << 4 |
                               _leftForwardChunk.mVoxels[0][y + 1][0] << 5 |
                               _forwardChunk.mVoxels[xz][y + 1][0] << 6 |
                               _forwardChunk.mVoxels[xz][y + 0][0] << 7;
            VoxelGenerator::GenerateVertices( caseID, Vector3( xz, y, xz ), _mesh.mVertices );
        }
    }

    //==================================================================================================================================================================================================
    //==================================================================================================================================================================================================
    void GenerateTopForwardVoxels( const VoxelChunk& _topChunk, const VoxelChunk& _forwardChunk, const VoxelChunk& _topForwardChunk, VoxelChunk& _chunk, Mesh& _mesh )
    {
        for( int x = 0; x < VoxelChunk::sSize - 1; ++x )
        {
            const int yz     = VoxelChunk::sSize - 1;
            const int caseID = _chunk.mVoxels[x + 1][yz][yz] << 0 |
                               _topChunk.mVoxels[x + 1][0][yz] << 1 |
                               _topChunk.mVoxels[x + 0][0][yz] << 2 |
                               _chunk.mVoxels[x + 0][yz][yz] << 3 |
                               _forwardChunk.mVoxels[x + 1][yz][0] << 4 |
                               _topForwardChunk.mVoxels[x + 1][0][0] << 5 |
                               _topForwardChunk.mVoxels[x + 0][0][0] << 6 |
                               _forwardChunk.mVoxels[x + 0][yz][0] << 7;
            VoxelGenerator::GenerateVertices( caseID, Vector3( x, yz, yz ), _mesh.mVertices );
        }
    }

    //==================================================================================================================================================================================================
    //==================================================================================================================================================================================================
    void VoxelGenerator::GenerateMesh( const VoxelTerrain& _terrain, VoxelChunk& _chunk, Mesh& _mesh )
    {
        // ScopedTimer         timerMesh( "gen voxel mesh" );
        _chunk.mIsMeshOutdated = false;

        _mesh.mVertices.resize( 0 );
        _mesh.mVertices.reserve( 30000 );

        const int leftChunkX    = _chunk.mPosition.x + 1;
        const int topChunkY     = _chunk.mPosition.y + 1;
        const int forwardChunkZ = _chunk.mPosition.z + 1;

        const VoxelChunk* leftChunk           = leftChunkX < _terrain.mSize.x ? &_terrain.GetChunk( { leftChunkX, _chunk.mPosition.y, _chunk.mPosition.z } ) : nullptr;
        const VoxelChunk* topChunk            = topChunkY < _terrain.mSize.y ? &_terrain.GetChunk( { _chunk.mPosition.x, topChunkY, _chunk.mPosition.z } ) : nullptr;
        const VoxelChunk* forwardChunk        = forwardChunkZ < _terrain.mSize.z ? &_terrain.GetChunk( { _chunk.mPosition.x, _chunk.mPosition.y, forwardChunkZ } ) : nullptr;
        const VoxelChunk* leftTopChunk        = leftChunk && topChunk ? &_terrain.GetChunk( { leftChunkX, topChunkY, _chunk.mPosition.z } ) : nullptr;
        const VoxelChunk* leftForwardChunk    = leftChunk && forwardChunk ? &_terrain.GetChunk( { leftChunkX, _chunk.mPosition.y, forwardChunkZ } ) : nullptr;
        const VoxelChunk* topForwardChunk     = topChunk && forwardChunk ? &_terrain.GetChunk( { _chunk.mPosition.x, topChunkY, forwardChunkZ } ) : nullptr;
        const VoxelChunk* topLeftForwardChunk = leftChunk && topChunk && forwardChunk ? &_terrain.GetChunk( { leftChunkX, topChunkY, forwardChunkZ } ) : nullptr;

        GenerateLocalVoxels( _chunk, _mesh );

        if( leftChunk ){ GenerateLeftVoxels( *leftChunk, _chunk, _mesh ); }
        if( topChunk ){ GenerateTopVoxels( *topChunk, _chunk, _mesh ); }
        if( forwardChunk ){ GenerateForwardVoxels( *forwardChunk, _chunk, _mesh ); }
        if( leftChunk && topChunk ){ GenerateLeftTopVoxels( *leftChunk, *topChunk, *leftTopChunk, _chunk, _mesh ); }
        if( leftChunk && forwardChunk ){ GenerateLeftForwardVoxels( *leftChunk, *forwardChunk, *leftForwardChunk, _chunk, _mesh ); }
        if( topChunk && forwardChunk ){ GenerateTopForwardVoxels( *topChunk, *forwardChunk, *topForwardChunk, _chunk, _mesh ); }
        if( leftChunk && topChunk && forwardChunk )
        {
            const int xyz    = VoxelChunk::sSize - 1;
            const int caseID =
                              ( *leftChunk ).mVoxels[0][xyz][xyz] << 0 |
                              ( *leftTopChunk ).mVoxels[0][0][xyz] << 1 |
                              ( *topChunk ).mVoxels[xyz][0][xyz] << 2 |
                              ( _chunk ).mVoxels[xyz][xyz][xyz] << 3 |
                              ( *leftForwardChunk ).mVoxels[0][xyz][0] << 4 |
                              ( *topLeftForwardChunk ).mVoxels[0][0][0] << 5 |
                              ( *topForwardChunk ).mVoxels[xyz][0][0] << 6 |
                              ( *forwardChunk ).mVoxels[xyz][xyz][0] << 7;
            VoxelGenerator::GenerateVertices( caseID, Vector3( xyz, xyz, xyz ), _mesh.mVertices );
        }

        glm::vec3 chunkOffset = VoxelChunk::sSize * _chunk.mPosition;
        glm::vec3 totalSize   = VoxelChunk::sSize * _terrain.mSize;
        for( Vertex& vertex : _mesh.mVertices )
        {
            glm::vec3 gPos = chunkOffset + vertex.mPos;
            vertex.mColor = gPos / totalSize;
        }

        _mesh.LoadFromVertices();
    }

    //==================================================================================================================================================================================================
    //==================================================================================================================================================================================================
    const Vector3 VoxelGenerator::sEdges[12] = {
            FIXED( 0.5 ) * Vector3( 2, 1, 0 ),
            FIXED( 0.5 ) * Vector3( 1, 2, 0 ),
            FIXED( 0.5 ) * Vector3( 0, 1, 0 ),
            FIXED( 0.5 ) * Vector3( 1, 0, 0 ),
            FIXED( 0.5 ) * Vector3( 2, 1, 2 ),
            FIXED( 0.5 ) * Vector3( 1, 2, 2 ),
            FIXED( 0.5 ) * Vector3( 0, 1, 2 ),
            FIXED( 0.5 ) * Vector3( 1, 0, 2 ),
            FIXED( 0.5 ) * Vector3( 2, 0, 1 ),
            FIXED( 0.5 ) * Vector3( 2, 2, 1 ),
            FIXED( 0.5 ) * Vector3( 0, 2, 1 ),
            FIXED( 0.5 ) * Vector3( 0, 0, 1 ),
    };

    //==================================================================================================================================================================================================
    //==================================================================================================================================================================================================
    const Vector3 VoxelGenerator::sCorners[8] = { Vector3( 1, 0, 0 ),
                                                  Vector3( 1, 1, 0 ),
                                                  Vector3( 0, 1, 0 ),
                                                  Vector3( 0, 0, 0 ),
                                                  Vector3( 1, 0, 1 ),
                                                  Vector3( 1, 1, 1 ),
                                                  Vector3( 0, 1, 1 ),
                                                  Vector3( 0, 0, 1 ),
    };

    //==================================================================================================================================================================================================
    //==================================================================================================================================================================================================
    const int8_t VoxelGenerator::sCaseToNumPolys[256] = {
            0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 2, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 3,
            1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 3, 2, 3, 3, 2, 3, 4, 4, 3, 3, 4, 4, 3, 4, 5, 5, 2,
            1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 3, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 4,
            2, 3, 3, 4, 3, 4, 2, 3, 3, 4, 4, 5, 4, 5, 3, 2, 3, 4, 4, 3, 4, 5, 3, 2, 4, 5, 5, 4, 5, 2, 4, 1,
            1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 3, 2, 3, 3, 4, 3, 4, 4, 5, 3, 2, 4, 3, 4, 3, 5, 2,
            2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 4, 3, 4, 4, 3, 4, 5, 5, 4, 4, 3, 5, 2, 5, 4, 2, 1,
            2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 2, 3, 3, 2, 3, 4, 4, 5, 4, 5, 5, 2, 4, 3, 5, 4, 3, 2, 4, 1,
            3, 4, 4, 5, 4, 5, 3, 4, 4, 5, 5, 2, 3, 4, 2, 1, 2, 3, 3, 2, 3, 4, 2, 1, 3, 2, 4, 1, 2, 1, 1, 0 };

    //==================================================================================================================================================================================================
    //==================================================================================================================================================================================================
    const int8_t  VoxelGenerator::sEdgeConnectList[256][5][3] = {
            { { -1, -1, -1 }, { -1, -1, -1 }, { -1, -1, -1 }, { -1, -1, -1 }, { -1, -1, -1 } },
            { { 0,  8,  3 },  { -1, -1, -1 }, { -1, -1, -1 }, { -1, -1, -1 }, { -1, -1, -1 } },
            { { 0,  1,  9 },  { -1, -1, -1 }, { -1, -1, -1 }, { -1, -1, -1 }, { -1, -1, -1 } },
            { { 1,  8,  3 },  { 9,  8,  1 },  { -1, -1, -1 }, { -1, -1, -1 }, { -1, -1, -1 } },
            { { 1,  2,  10 }, { -1, -1, -1 }, { -1, -1, -1 }, { -1, -1, -1 }, { -1, -1, -1 } },
            { { 0,  8,  3 },  { 1,  2,  10 }, { -1, -1, -1 }, { -1, -1, -1 }, { -1, -1, -1 } },
            { { 9,  2,  10 }, { 0,  2,  9 },  { -1, -1, -1 }, { -1, -1, -1 }, { -1, -1, -1 } },
            { { 2,  8,  3 },  { 2,  10, 8 },  { 10, 9,  8 },  { -1, -1, -1 }, { -1, -1, -1 } },
            { { 3,  11, 2 },  { -1, -1, -1 }, { -1, -1, -1 }, { -1, -1, -1 }, { -1, -1, -1 } },
            { { 0,  11, 2 },  { 8,  11, 0 },  { -1, -1, -1 }, { -1, -1, -1 }, { -1, -1, -1 } },
            { { 1,  9,  0 },  { 2,  3,  11 }, { -1, -1, -1 }, { -1, -1, -1 }, { -1, -1, -1 } },
            { { 1,  11, 2 },  { 1,  9,  11 }, { 9,  8,  11 }, { -1, -1, -1 }, { -1, -1, -1 } },
            { { 3,  10, 1 },  { 11, 10, 3 },  { -1, -1, -1 }, { -1, -1, -1 }, { -1, -1, -1 } },
            { { 0,  10, 1 },  { 0,  8,  10 }, { 8,  11, 10 }, { -1, -1, -1 }, { -1, -1, -1 } },
            { { 3,  9,  0 },  { 3,  11, 9 },  { 11, 10, 9 },  { -1, -1, -1 }, { -1, -1, -1 } },
            { { 9,  8,  10 }, { 10, 8,  11 }, { -1, -1, -1 }, { -1, -1, -1 }, { -1, -1, -1 } },
            { { 4,  7,  8 },  { -1, -1, -1 }, { -1, -1, -1 }, { -1, -1, -1 }, { -1, -1, -1 } },
            { { 4,  3,  0 },  { 7,  3,  4 },  { -1, -1, -1 }, { -1, -1, -1 }, { -1, -1, -1 } },
            { { 0,  1,  9 },  { 8,  4,  7 },  { -1, -1, -1 }, { -1, -1, -1 }, { -1, -1, -1 } },
            { { 4,  1,  9 },  { 4,  7,  1 },  { 7,  3,  1 },  { -1, -1, -1 }, { -1, -1, -1 } },
            { { 1,  2,  10 }, { 8,  4,  7 },  { -1, -1, -1 }, { -1, -1, -1 }, { -1, -1, -1 } },
            { { 3,  4,  7 },  { 3,  0,  4 },  { 1,  2,  10 }, { -1, -1, -1 }, { -1, -1, -1 } },
            { { 9,  2,  10 }, { 9,  0,  2 },  { 8,  4,  7 },  { -1, -1, -1 }, { -1, -1, -1 } },
            { { 2,  10, 9 },  { 2,  9,  7 },  { 2,  7,  3 },  { 7,  9,  4 },  { -1, -1, -1 } },
            { { 8,  4,  7 },  { 3,  11, 2 },  { -1, -1, -1 }, { -1, -1, -1 }, { -1, -1, -1 } },
            { { 11, 4,  7 },  { 11, 2,  4 },  { 2,  0,  4 },  { -1, -1, -1 }, { -1, -1, -1 } },
            { { 9,  0,  1 },  { 8,  4,  7 },  { 2,  3,  11 }, { -1, -1, -1 }, { -1, -1, -1 } },
            { { 4,  7,  11 }, { 9,  4,  11 }, { 9,  11, 2 },  { 9,  2,  1 },  { -1, -1, -1 } },
            { { 3,  10, 1 },  { 3,  11, 10 }, { 7,  8,  4 },  { -1, -1, -1 }, { -1, -1, -1 } },
            { { 1,  11, 10 }, { 1,  4,  11 }, { 1,  0,  4 },  { 7,  11, 4 },  { -1, -1, -1 } },
            { { 4,  7,  8 },  { 9,  0,  11 }, { 9,  11, 10 }, { 11, 0,  3 },  { -1, -1, -1 } },
            { { 4,  7,  11 }, { 4,  11, 9 },  { 9,  11, 10 }, { -1, -1, -1 }, { -1, -1, -1 } },
            { { 9,  5,  4 },  { -1, -1, -1 }, { -1, -1, -1 }, { -1, -1, -1 }, { -1, -1, -1 } },
            { { 9,  5,  4 },  { 0,  8,  3 },  { -1, -1, -1 }, { -1, -1, -1 }, { -1, -1, -1 } },
            { { 0,  5,  4 },  { 1,  5,  0 },  { -1, -1, -1 }, { -1, -1, -1 }, { -1, -1, -1 } },
            { { 8,  5,  4 },  { 8,  3,  5 },  { 3,  1,  5 },  { -1, -1, -1 }, { -1, -1, -1 } },
            { { 1,  2,  10 }, { 9,  5,  4 },  { -1, -1, -1 }, { -1, -1, -1 }, { -1, -1, -1 } },
            { { 3,  0,  8 },  { 1,  2,  10 }, { 4,  9,  5 },  { -1, -1, -1 }, { -1, -1, -1 } },
            { { 5,  2,  10 }, { 5,  4,  2 },  { 4,  0,  2 },  { -1, -1, -1 }, { -1, -1, -1 } },
            { { 2,  10, 5 },  { 3,  2,  5 },  { 3,  5,  4 },  { 3,  4,  8 },  { -1, -1, -1 } },
            { { 9,  5,  4 },  { 2,  3,  11 }, { -1, -1, -1 }, { -1, -1, -1 }, { -1, -1, -1 } },
            { { 0,  11, 2 },  { 0,  8,  11 }, { 4,  9,  5 },  { -1, -1, -1 }, { -1, -1, -1 } },
            { { 0,  5,  4 },  { 0,  1,  5 },  { 2,  3,  11 }, { -1, -1, -1 }, { -1, -1, -1 } },
            { { 2,  1,  5 },  { 2,  5,  8 },  { 2,  8,  11 }, { 4,  8,  5 },  { -1, -1, -1 } },
            { { 10, 3,  11 }, { 10, 1,  3 },  { 9,  5,  4 },  { -1, -1, -1 }, { -1, -1, -1 } },
            { { 4,  9,  5 },  { 0,  8,  1 },  { 8,  10, 1 },  { 8,  11, 10 }, { -1, -1, -1 } },
            { { 5,  4,  0 },  { 5,  0,  11 }, { 5,  11, 10 }, { 11, 0,  3 },  { -1, -1, -1 } },
            { { 5,  4,  8 },  { 5,  8,  10 }, { 10, 8,  11 }, { -1, -1, -1 }, { -1, -1, -1 } },
            { { 9,  7,  8 },  { 5,  7,  9 },  { -1, -1, -1 }, { -1, -1, -1 }, { -1, -1, -1 } },
            { { 9,  3,  0 },  { 9,  5,  3 },  { 5,  7,  3 },  { -1, -1, -1 }, { -1, -1, -1 } },
            { { 0,  7,  8 },  { 0,  1,  7 },  { 1,  5,  7 },  { -1, -1, -1 }, { -1, -1, -1 } },
            { { 1,  5,  3 },  { 3,  5,  7 },  { -1, -1, -1 }, { -1, -1, -1 }, { -1, -1, -1 } },
            { { 9,  7,  8 },  { 9,  5,  7 },  { 10, 1,  2 },  { -1, -1, -1 }, { -1, -1, -1 } },
            { { 10, 1,  2 },  { 9,  5,  0 },  { 5,  3,  0 },  { 5,  7,  3 },  { -1, -1, -1 } },
            { { 8,  0,  2 },  { 8,  2,  5 },  { 8,  5,  7 },  { 10, 5,  2 },  { -1, -1, -1 } },
            { { 2,  10, 5 },  { 2,  5,  3 },  { 3,  5,  7 },  { -1, -1, -1 }, { -1, -1, -1 } },
            { { 7,  9,  5 },  { 7,  8,  9 },  { 3,  11, 2 },  { -1, -1, -1 }, { -1, -1, -1 } },
            { { 9,  5,  7 },  { 9,  7,  2 },  { 9,  2,  0 },  { 2,  7,  11 }, { -1, -1, -1 } },
            { { 2,  3,  11 }, { 0,  1,  8 },  { 1,  7,  8 },  { 1,  5,  7 },  { -1, -1, -1 } },
            { { 11, 2,  1 },  { 11, 1,  7 },  { 7,  1,  5 },  { -1, -1, -1 }, { -1, -1, -1 } },
            { { 9,  5,  8 },  { 8,  5,  7 },  { 10, 1,  3 },  { 10, 3,  11 }, { -1, -1, -1 } },
            { { 5,  7,  0 },  { 5,  0,  9 },  { 7,  11, 0 },  { 1,  0,  10 }, { 11, 10, 0 } },
            { { 11, 10, 0 },  { 11, 0,  3 },  { 10, 5,  0 },  { 8,  0,  7 },  { 5,  7,  0 } },
            { { 11, 10, 5 },  { 7,  11, 5 },  { -1, -1, -1 }, { -1, -1, -1 }, { -1, -1, -1 } },
            { { 10, 6,  5 },  { -1, -1, -1 }, { -1, -1, -1 }, { -1, -1, -1 }, { -1, -1, -1 } },
            { { 0,  8,  3 },  { 5,  10, 6 },  { -1, -1, -1 }, { -1, -1, -1 }, { -1, -1, -1 } },
            { { 9,  0,  1 },  { 5,  10, 6 },  { -1, -1, -1 }, { -1, -1, -1 }, { -1, -1, -1 } },
            { { 1,  8,  3 },  { 1,  9,  8 },  { 5,  10, 6 },  { -1, -1, -1 }, { -1, -1, -1 } },
            { { 1,  6,  5 },  { 2,  6,  1 },  { -1, -1, -1 }, { -1, -1, -1 }, { -1, -1, -1 } },
            { { 1,  6,  5 },  { 1,  2,  6 },  { 3,  0,  8 },  { -1, -1, -1 }, { -1, -1, -1 } },
            { { 9,  6,  5 },  { 9,  0,  6 },  { 0,  2,  6 },  { -1, -1, -1 }, { -1, -1, -1 } },
            { { 5,  9,  8 },  { 5,  8,  2 },  { 5,  2,  6 },  { 3,  2,  8 },  { -1, -1, -1 } },
            { { 2,  3,  11 }, { 10, 6,  5 },  { -1, -1, -1 }, { -1, -1, -1 }, { -1, -1, -1 } },
            { { 11, 0,  8 },  { 11, 2,  0 },  { 10, 6,  5 },  { -1, -1, -1 }, { -1, -1, -1 } },
            { { 0,  1,  9 },  { 2,  3,  11 }, { 5,  10, 6 },  { -1, -1, -1 }, { -1, -1, -1 } },
            { { 5,  10, 6 },  { 1,  9,  2 },  { 9,  11, 2 },  { 9,  8,  11 }, { -1, -1, -1 } },
            { { 6,  3,  11 }, { 6,  5,  3 },  { 5,  1,  3 },  { -1, -1, -1 }, { -1, -1, -1 } },
            { { 0,  8,  11 }, { 0,  11, 5 },  { 0,  5,  1 },  { 5,  11, 6 },  { -1, -1, -1 } },
            { { 3,  11, 6 },  { 0,  3,  6 },  { 0,  6,  5 },  { 0,  5,  9 },  { -1, -1, -1 } },
            { { 6,  5,  9 },  { 6,  9,  11 }, { 11, 9,  8 },  { -1, -1, -1 }, { -1, -1, -1 } },
            { { 5,  10, 6 },  { 4,  7,  8 },  { -1, -1, -1 }, { -1, -1, -1 }, { -1, -1, -1 } },
            { { 4,  3,  0 },  { 4,  7,  3 },  { 6,  5,  10 }, { -1, -1, -1 }, { -1, -1, -1 } },
            { { 1,  9,  0 },  { 5,  10, 6 },  { 8,  4,  7 },  { -1, -1, -1 }, { -1, -1, -1 } },
            { { 10, 6,  5 },  { 1,  9,  7 },  { 1,  7,  3 },  { 7,  9,  4 },  { -1, -1, -1 } },
            { { 6,  1,  2 },  { 6,  5,  1 },  { 4,  7,  8 },  { -1, -1, -1 }, { -1, -1, -1 } },
            { { 1,  2,  5 },  { 5,  2,  6 },  { 3,  0,  4 },  { 3,  4,  7 },  { -1, -1, -1 } },
            { { 8,  4,  7 },  { 9,  0,  5 },  { 0,  6,  5 },  { 0,  2,  6 },  { -1, -1, -1 } },
            { { 7,  3,  9 },  { 7,  9,  4 },  { 3,  2,  9 },  { 5,  9,  6 },  { 2,  6,  9 } },
            { { 3,  11, 2 },  { 7,  8,  4 },  { 10, 6,  5 },  { -1, -1, -1 }, { -1, -1, -1 } },
            { { 5,  10, 6 },  { 4,  7,  2 },  { 4,  2,  0 },  { 2,  7,  11 }, { -1, -1, -1 } },
            { { 0,  1,  9 },  { 4,  7,  8 },  { 2,  3,  11 }, { 5,  10, 6 },  { -1, -1, -1 } },
            { { 9,  2,  1 },  { 9,  11, 2 },  { 9,  4,  11 }, { 7,  11, 4 },  { 5,  10, 6 } },
            { { 8,  4,  7 },  { 3,  11, 5 },  { 3,  5,  1 },  { 5,  11, 6 },  { -1, -1, -1 } },
            { { 5,  1,  11 }, { 5,  11, 6 },  { 1,  0,  11 }, { 7,  11, 4 },  { 0,  4,  11 } },
            { { 0,  5,  9 },  { 0,  6,  5 },  { 0,  3,  6 },  { 11, 6,  3 },  { 8,  4,  7 } },
            { { 6,  5,  9 },  { 6,  9,  11 }, { 4,  7,  9 },  { 7,  11, 9 },  { -1, -1, -1 } },
            { { 10, 4,  9 },  { 6,  4,  10 }, { -1, -1, -1 }, { -1, -1, -1 }, { -1, -1, -1 } },
            { { 4,  10, 6 },  { 4,  9,  10 }, { 0,  8,  3 },  { -1, -1, -1 }, { -1, -1, -1 } },
            { { 10, 0,  1 },  { 10, 6,  0 },  { 6,  4,  0 },  { -1, -1, -1 }, { -1, -1, -1 } },
            { { 8,  3,  1 },  { 8,  1,  6 },  { 8,  6,  4 },  { 6,  1,  10 }, { -1, -1, -1 } },
            { { 1,  4,  9 },  { 1,  2,  4 },  { 2,  6,  4 },  { -1, -1, -1 }, { -1, -1, -1 } },
            { { 3,  0,  8 },  { 1,  2,  9 },  { 2,  4,  9 },  { 2,  6,  4 },  { -1, -1, -1 } },
            { { 0,  2,  4 },  { 4,  2,  6 },  { -1, -1, -1 }, { -1, -1, -1 }, { -1, -1, -1 } },
            { { 8,  3,  2 },  { 8,  2,  4 },  { 4,  2,  6 },  { -1, -1, -1 }, { -1, -1, -1 } },
            { { 10, 4,  9 },  { 10, 6,  4 },  { 11, 2,  3 },  { -1, -1, -1 }, { -1, -1, -1 } },
            { { 0,  8,  2 },  { 2,  8,  11 }, { 4,  9,  10 }, { 4,  10, 6 },  { -1, -1, -1 } },
            { { 3,  11, 2 },  { 0,  1,  6 },  { 0,  6,  4 },  { 6,  1,  10 }, { -1, -1, -1 } },
            { { 6,  4,  1 },  { 6,  1,  10 }, { 4,  8,  1 },  { 2,  1,  11 }, { 8,  11, 1 } },
            { { 9,  6,  4 },  { 9,  3,  6 },  { 9,  1,  3 },  { 11, 6,  3 },  { -1, -1, -1 } },
            { { 8,  11, 1 },  { 8,  1,  0 },  { 11, 6,  1 },  { 9,  1,  4 },  { 6,  4,  1 } },
            { { 3,  11, 6 },  { 3,  6,  0 },  { 0,  6,  4 },  { -1, -1, -1 }, { -1, -1, -1 } },
            { { 6,  4,  8 },  { 11, 6,  8 },  { -1, -1, -1 }, { -1, -1, -1 }, { -1, -1, -1 } },
            { { 7,  10, 6 },  { 7,  8,  10 }, { 8,  9,  10 }, { -1, -1, -1 }, { -1, -1, -1 } },
            { { 0,  7,  3 },  { 0,  10, 7 },  { 0,  9,  10 }, { 6,  7,  10 }, { -1, -1, -1 } },
            { { 10, 6,  7 },  { 1,  10, 7 },  { 1,  7,  8 },  { 1,  8,  0 },  { -1, -1, -1 } },
            { { 10, 6,  7 },  { 10, 7,  1 },  { 1,  7,  3 },  { -1, -1, -1 }, { -1, -1, -1 } },
            { { 1,  2,  6 },  { 1,  6,  8 },  { 1,  8,  9 },  { 8,  6,  7 },  { -1, -1, -1 } },
            { { 2,  6,  9 },  { 2,  9,  1 },  { 6,  7,  9 },  { 0,  9,  3 },  { 7,  3,  9 } },
            { { 7,  8,  0 },  { 7,  0,  6 },  { 6,  0,  2 },  { -1, -1, -1 }, { -1, -1, -1 } },
            { { 7,  3,  2 },  { 6,  7,  2 },  { -1, -1, -1 }, { -1, -1, -1 }, { -1, -1, -1 } },
            { { 2,  3,  11 }, { 10, 6,  8 },  { 10, 8,  9 },  { 8,  6,  7 },  { -1, -1, -1 } },
            { { 2,  0,  7 },  { 2,  7,  11 }, { 0,  9,  7 },  { 6,  7,  10 }, { 9,  10, 7 } },
            { { 1,  8,  0 },  { 1,  7,  8 },  { 1,  10, 7 },  { 6,  7,  10 }, { 2,  3,  11 } },
            { { 11, 2,  1 },  { 11, 1,  7 },  { 10, 6,  1 },  { 6,  7,  1 },  { -1, -1, -1 } },
            { { 8,  9,  6 },  { 8,  6,  7 },  { 9,  1,  6 },  { 11, 6,  3 },  { 1,  3,  6 } },
            { { 0,  9,  1 },  { 11, 6,  7 },  { -1, -1, -1 }, { -1, -1, -1 }, { -1, -1, -1 } },
            { { 7,  8,  0 },  { 7,  0,  6 },  { 3,  11, 0 },  { 11, 6,  0 },  { -1, -1, -1 } },
            { { 7,  11, 6 },  { -1, -1, -1 }, { -1, -1, -1 }, { -1, -1, -1 }, { -1, -1, -1 } },
            { { 7,  6,  11 }, { -1, -1, -1 }, { -1, -1, -1 }, { -1, -1, -1 }, { -1, -1, -1 } },
            { { 3,  0,  8 },  { 11, 7,  6 },  { -1, -1, -1 }, { -1, -1, -1 }, { -1, -1, -1 } },
            { { 0,  1,  9 },  { 11, 7,  6 },  { -1, -1, -1 }, { -1, -1, -1 }, { -1, -1, -1 } },
            { { 8,  1,  9 },  { 8,  3,  1 },  { 11, 7,  6 },  { -1, -1, -1 }, { -1, -1, -1 } },
            { { 10, 1,  2 },  { 6,  11, 7 },  { -1, -1, -1 }, { -1, -1, -1 }, { -1, -1, -1 } },
            { { 1,  2,  10 }, { 3,  0,  8 },  { 6,  11, 7 },  { -1, -1, -1 }, { -1, -1, -1 } },
            { { 2,  9,  0 },  { 2,  10, 9 },  { 6,  11, 7 },  { -1, -1, -1 }, { -1, -1, -1 } },
            { { 6,  11, 7 },  { 2,  10, 3 },  { 10, 8,  3 },  { 10, 9,  8 },  { -1, -1, -1 } },
            { { 7,  2,  3 },  { 6,  2,  7 },  { -1, -1, -1 }, { -1, -1, -1 }, { -1, -1, -1 } },
            { { 7,  0,  8 },  { 7,  6,  0 },  { 6,  2,  0 },  { -1, -1, -1 }, { -1, -1, -1 } },
            { { 2,  7,  6 },  { 2,  3,  7 },  { 0,  1,  9 },  { -1, -1, -1 }, { -1, -1, -1 } },
            { { 1,  6,  2 },  { 1,  8,  6 },  { 1,  9,  8 },  { 8,  7,  6 },  { -1, -1, -1 } },
            { { 10, 7,  6 },  { 10, 1,  7 },  { 1,  3,  7 },  { -1, -1, -1 }, { -1, -1, -1 } },
            { { 10, 7,  6 },  { 1,  7,  10 }, { 1,  8,  7 },  { 1,  0,  8 },  { -1, -1, -1 } },
            { { 0,  3,  7 },  { 0,  7,  10 }, { 0,  10, 9 },  { 6,  10, 7 },  { -1, -1, -1 } },
            { { 7,  6,  10 }, { 7,  10, 8 },  { 8,  10, 9 },  { -1, -1, -1 }, { -1, -1, -1 } },
            { { 6,  8,  4 },  { 11, 8,  6 },  { -1, -1, -1 }, { -1, -1, -1 }, { -1, -1, -1 } },
            { { 3,  6,  11 }, { 3,  0,  6 },  { 0,  4,  6 },  { -1, -1, -1 }, { -1, -1, -1 } },
            { { 8,  6,  11 }, { 8,  4,  6 },  { 9,  0,  1 },  { -1, -1, -1 }, { -1, -1, -1 } },
            { { 9,  4,  6 },  { 9,  6,  3 },  { 9,  3,  1 },  { 11, 3,  6 },  { -1, -1, -1 } },
            { { 6,  8,  4 },  { 6,  11, 8 },  { 2,  10, 1 },  { -1, -1, -1 }, { -1, -1, -1 } },
            { { 1,  2,  10 }, { 3,  0,  11 }, { 0,  6,  11 }, { 0,  4,  6 },  { -1, -1, -1 } },
            { { 4,  11, 8 },  { 4,  6,  11 }, { 0,  2,  9 },  { 2,  10, 9 },  { -1, -1, -1 } },
            { { 10, 9,  3 },  { 10, 3,  2 },  { 9,  4,  3 },  { 11, 3,  6 },  { 4,  6,  3 } },
            { { 8,  2,  3 },  { 8,  4,  2 },  { 4,  6,  2 },  { -1, -1, -1 }, { -1, -1, -1 } },
            { { 0,  4,  2 },  { 4,  6,  2 },  { -1, -1, -1 }, { -1, -1, -1 }, { -1, -1, -1 } },
            { { 1,  9,  0 },  { 2,  3,  4 },  { 2,  4,  6 },  { 4,  3,  8 },  { -1, -1, -1 } },
            { { 1,  9,  4 },  { 1,  4,  2 },  { 2,  4,  6 },  { -1, -1, -1 }, { -1, -1, -1 } },
            { { 8,  1,  3 },  { 8,  6,  1 },  { 8,  4,  6 },  { 6,  10, 1 },  { -1, -1, -1 } },
            { { 10, 1,  0 },  { 10, 0,  6 },  { 6,  0,  4 },  { -1, -1, -1 }, { -1, -1, -1 } },
            { { 4,  6,  3 },  { 4,  3,  8 },  { 6,  10, 3 },  { 0,  3,  9 },  { 10, 9,  3 } },
            { { 10, 9,  4 },  { 6,  10, 4 },  { -1, -1, -1 }, { -1, -1, -1 }, { -1, -1, -1 } },
            { { 4,  9,  5 },  { 7,  6,  11 }, { -1, -1, -1 }, { -1, -1, -1 }, { -1, -1, -1 } },
            { { 0,  8,  3 },  { 4,  9,  5 },  { 11, 7,  6 },  { -1, -1, -1 }, { -1, -1, -1 } },
            { { 5,  0,  1 },  { 5,  4,  0 },  { 7,  6,  11 }, { -1, -1, -1 }, { -1, -1, -1 } },
            { { 11, 7,  6 },  { 8,  3,  4 },  { 3,  5,  4 },  { 3,  1,  5 },  { -1, -1, -1 } },
            { { 9,  5,  4 },  { 10, 1,  2 },  { 7,  6,  11 }, { -1, -1, -1 }, { -1, -1, -1 } },
            { { 6,  11, 7 },  { 1,  2,  10 }, { 0,  8,  3 },  { 4,  9,  5 },  { -1, -1, -1 } },
            { { 7,  6,  11 }, { 5,  4,  10 }, { 4,  2,  10 }, { 4,  0,  2 },  { -1, -1, -1 } },
            { { 3,  4,  8 },  { 3,  5,  4 },  { 3,  2,  5 },  { 10, 5,  2 },  { 11, 7,  6 } },
            { { 7,  2,  3 },  { 7,  6,  2 },  { 5,  4,  9 },  { -1, -1, -1 }, { -1, -1, -1 } },
            { { 9,  5,  4 },  { 0,  8,  6 },  { 0,  6,  2 },  { 6,  8,  7 },  { -1, -1, -1 } },
            { { 3,  6,  2 },  { 3,  7,  6 },  { 1,  5,  0 },  { 5,  4,  0 },  { -1, -1, -1 } },
            { { 6,  2,  8 },  { 6,  8,  7 },  { 2,  1,  8 },  { 4,  8,  5 },  { 1,  5,  8 } },
            { { 9,  5,  4 },  { 10, 1,  6 },  { 1,  7,  6 },  { 1,  3,  7 },  { -1, -1, -1 } },
            { { 1,  6,  10 }, { 1,  7,  6 },  { 1,  0,  7 },  { 8,  7,  0 },  { 9,  5,  4 } },
            { { 4,  0,  10 }, { 4,  10, 5 },  { 0,  3,  10 }, { 6,  10, 7 },  { 3,  7,  10 } },
            { { 7,  6,  10 }, { 7,  10, 8 },  { 5,  4,  10 }, { 4,  8,  10 }, { -1, -1, -1 } },
            { { 6,  9,  5 },  { 6,  11, 9 },  { 11, 8,  9 },  { -1, -1, -1 }, { -1, -1, -1 } },
            { { 3,  6,  11 }, { 0,  6,  3 },  { 0,  5,  6 },  { 0,  9,  5 },  { -1, -1, -1 } },
            { { 0,  11, 8 },  { 0,  5,  11 }, { 0,  1,  5 },  { 5,  6,  11 }, { -1, -1, -1 } },
            { { 6,  11, 3 },  { 6,  3,  5 },  { 5,  3,  1 },  { -1, -1, -1 }, { -1, -1, -1 } },
            { { 1,  2,  10 }, { 9,  5,  11 }, { 9,  11, 8 },  { 11, 5,  6 },  { -1, -1, -1 } },
            { { 0,  11, 3 },  { 0,  6,  11 }, { 0,  9,  6 },  { 5,  6,  9 },  { 1,  2,  10 } },
            { { 11, 8,  5 },  { 11, 5,  6 },  { 8,  0,  5 },  { 10, 5,  2 },  { 0,  2,  5 } },
            { { 6,  11, 3 },  { 6,  3,  5 },  { 2,  10, 3 },  { 10, 5,  3 },  { -1, -1, -1 } },
            { { 5,  8,  9 },  { 5,  2,  8 },  { 5,  6,  2 },  { 3,  8,  2 },  { -1, -1, -1 } },
            { { 9,  5,  6 },  { 9,  6,  0 },  { 0,  6,  2 },  { -1, -1, -1 }, { -1, -1, -1 } },
            { { 1,  5,  8 },  { 1,  8,  0 },  { 5,  6,  8 },  { 3,  8,  2 },  { 6,  2,  8 } },
            { { 1,  5,  6 },  { 2,  1,  6 },  { -1, -1, -1 }, { -1, -1, -1 }, { -1, -1, -1 } },
            { { 1,  3,  6 },  { 1,  6,  10 }, { 3,  8,  6 },  { 5,  6,  9 },  { 8,  9,  6 } },
            { { 10, 1,  0 },  { 10, 0,  6 },  { 9,  5,  0 },  { 5,  6,  0 },  { -1, -1, -1 } },
            { { 0,  3,  8 },  { 5,  6,  10 }, { -1, -1, -1 }, { -1, -1, -1 }, { -1, -1, -1 } },
            { { 10, 5,  6 },  { -1, -1, -1 }, { -1, -1, -1 }, { -1, -1, -1 }, { -1, -1, -1 } },
            { { 11, 5,  10 }, { 7,  5,  11 }, { -1, -1, -1 }, { -1, -1, -1 }, { -1, -1, -1 } },
            { { 11, 5,  10 }, { 11, 7,  5 },  { 8,  3,  0 },  { -1, -1, -1 }, { -1, -1, -1 } },
            { { 5,  11, 7 },  { 5,  10, 11 }, { 1,  9,  0 },  { -1, -1, -1 }, { -1, -1, -1 } },
            { { 10, 7,  5 },  { 10, 11, 7 },  { 9,  8,  1 },  { 8,  3,  1 },  { -1, -1, -1 } },
            { { 11, 1,  2 },  { 11, 7,  1 },  { 7,  5,  1 },  { -1, -1, -1 }, { -1, -1, -1 } },
            { { 0,  8,  3 },  { 1,  2,  7 },  { 1,  7,  5 },  { 7,  2,  11 }, { -1, -1, -1 } },
            { { 9,  7,  5 },  { 9,  2,  7 },  { 9,  0,  2 },  { 2,  11, 7 },  { -1, -1, -1 } },
            { { 7,  5,  2 },  { 7,  2,  11 }, { 5,  9,  2 },  { 3,  2,  8 },  { 9,  8,  2 } },
            { { 2,  5,  10 }, { 2,  3,  5 },  { 3,  7,  5 },  { -1, -1, -1 }, { -1, -1, -1 } },
            { { 8,  2,  0 },  { 8,  5,  2 },  { 8,  7,  5 },  { 10, 2,  5 },  { -1, -1, -1 } },
            { { 9,  0,  1 },  { 5,  10, 3 },  { 5,  3,  7 },  { 3,  10, 2 },  { -1, -1, -1 } },
            { { 9,  8,  2 },  { 9,  2,  1 },  { 8,  7,  2 },  { 10, 2,  5 },  { 7,  5,  2 } },
            { { 1,  3,  5 },  { 3,  7,  5 },  { -1, -1, -1 }, { -1, -1, -1 }, { -1, -1, -1 } },
            { { 0,  8,  7 },  { 0,  7,  1 },  { 1,  7,  5 },  { -1, -1, -1 }, { -1, -1, -1 } },
            { { 9,  0,  3 },  { 9,  3,  5 },  { 5,  3,  7 },  { -1, -1, -1 }, { -1, -1, -1 } },
            { { 9,  8,  7 },  { 5,  9,  7 },  { -1, -1, -1 }, { -1, -1, -1 }, { -1, -1, -1 } },
            { { 5,  8,  4 },  { 5,  10, 8 },  { 10, 11, 8 },  { -1, -1, -1 }, { -1, -1, -1 } },
            { { 5,  0,  4 },  { 5,  11, 0 },  { 5,  10, 11 }, { 11, 3,  0 },  { -1, -1, -1 } },
            { { 0,  1,  9 },  { 8,  4,  10 }, { 8,  10, 11 }, { 10, 4,  5 },  { -1, -1, -1 } },
            { { 10, 11, 4 },  { 10, 4,  5 },  { 11, 3,  4 },  { 9,  4,  1 },  { 3,  1,  4 } },
            { { 2,  5,  1 },  { 2,  8,  5 },  { 2,  11, 8 },  { 4,  5,  8 },  { -1, -1, -1 } },
            { { 0,  4,  11 }, { 0,  11, 3 },  { 4,  5,  11 }, { 2,  11, 1 },  { 5,  1,  11 } },
            { { 0,  2,  5 },  { 0,  5,  9 },  { 2,  11, 5 },  { 4,  5,  8 },  { 11, 8,  5 } },
            { { 9,  4,  5 },  { 2,  11, 3 },  { -1, -1, -1 }, { -1, -1, -1 }, { -1, -1, -1 } },
            { { 2,  5,  10 }, { 3,  5,  2 },  { 3,  4,  5 },  { 3,  8,  4 },  { -1, -1, -1 } },
            { { 5,  10, 2 },  { 5,  2,  4 },  { 4,  2,  0 },  { -1, -1, -1 }, { -1, -1, -1 } },
            { { 3,  10, 2 },  { 3,  5,  10 }, { 3,  8,  5 },  { 4,  5,  8 },  { 0,  1,  9 } },
            { { 5,  10, 2 },  { 5,  2,  4 },  { 1,  9,  2 },  { 9,  4,  2 },  { -1, -1, -1 } },
            { { 8,  4,  5 },  { 8,  5,  3 },  { 3,  5,  1 },  { -1, -1, -1 }, { -1, -1, -1 } },
            { { 0,  4,  5 },  { 1,  0,  5 },  { -1, -1, -1 }, { -1, -1, -1 }, { -1, -1, -1 } },
            { { 8,  4,  5 },  { 8,  5,  3 },  { 9,  0,  5 },  { 0,  3,  5 },  { -1, -1, -1 } },
            { { 9,  4,  5 },  { -1, -1, -1 }, { -1, -1, -1 }, { -1, -1, -1 }, { -1, -1, -1 } },
            { { 4,  11, 7 },  { 4,  9,  11 }, { 9,  10, 11 }, { -1, -1, -1 }, { -1, -1, -1 } },
            { { 0,  8,  3 },  { 4,  9,  7 },  { 9,  11, 7 },  { 9,  10, 11 }, { -1, -1, -1 } },
            { { 1,  10, 11 }, { 1,  11, 4 },  { 1,  4,  0 },  { 7,  4,  11 }, { -1, -1, -1 } },
            { { 3,  1,  4 },  { 3,  4,  8 },  { 1,  10, 4 },  { 7,  4,  11 }, { 10, 11, 4 } },
            { { 4,  11, 7 },  { 9,  11, 4 },  { 9,  2,  11 }, { 9,  1,  2 },  { -1, -1, -1 } },
            { { 9,  7,  4 },  { 9,  11, 7 },  { 9,  1,  11 }, { 2,  11, 1 },  { 0,  8,  3 } },
            { { 11, 7,  4 },  { 11, 4,  2 },  { 2,  4,  0 },  { -1, -1, -1 }, { -1, -1, -1 } },
            { { 11, 7,  4 },  { 11, 4,  2 },  { 8,  3,  4 },  { 3,  2,  4 },  { -1, -1, -1 } },
            { { 2,  9,  10 }, { 2,  7,  9 },  { 2,  3,  7 },  { 7,  4,  9 },  { -1, -1, -1 } },
            { { 9,  10, 7 },  { 9,  7,  4 },  { 10, 2,  7 },  { 8,  7,  0 },  { 2,  0,  7 } },
            { { 3,  7,  10 }, { 3,  10, 2 },  { 7,  4,  10 }, { 1,  10, 0 },  { 4,  0,  10 } },
            { { 1,  10, 2 },  { 8,  7,  4 },  { -1, -1, -1 }, { -1, -1, -1 }, { -1, -1, -1 } },
            { { 4,  9,  1 },  { 4,  1,  7 },  { 7,  1,  3 },  { -1, -1, -1 }, { -1, -1, -1 } },
            { { 4,  9,  1 },  { 4,  1,  7 },  { 0,  8,  1 },  { 8,  7,  1 },  { -1, -1, -1 } },
            { { 4,  0,  3 },  { 7,  4,  3 },  { -1, -1, -1 }, { -1, -1, -1 }, { -1, -1, -1 } },
            { { 4,  8,  7 },  { -1, -1, -1 }, { -1, -1, -1 }, { -1, -1, -1 }, { -1, -1, -1 } },
            { { 9,  10, 8 },  { 10, 11, 8 },  { -1, -1, -1 }, { -1, -1, -1 }, { -1, -1, -1 } },
            { { 3,  0,  9 },  { 3,  9,  11 }, { 11, 9,  10 }, { -1, -1, -1 }, { -1, -1, -1 } },
            { { 0,  1,  10 }, { 0,  10, 8 },  { 8,  10, 11 }, { -1, -1, -1 }, { -1, -1, -1 } },
            { { 3,  1,  10 }, { 11, 3,  10 }, { -1, -1, -1 }, { -1, -1, -1 }, { -1, -1, -1 } },
            { { 1,  2,  11 }, { 1,  11, 9 },  { 9,  11, 8 },  { -1, -1, -1 }, { -1, -1, -1 } },
            { { 3,  0,  9 },  { 3,  9,  11 }, { 1,  2,  9 },  { 2,  11, 9 },  { -1, -1, -1 } },
            { { 0,  2,  11 }, { 8,  0,  11 }, { -1, -1, -1 }, { -1, -1, -1 }, { -1, -1, -1 } },
            { { 3,  2,  11 }, { -1, -1, -1 }, { -1, -1, -1 }, { -1, -1, -1 }, { -1, -1, -1 } },
            { { 2,  3,  8 },  { 2,  8,  10 }, { 10, 8,  9 },  { -1, -1, -1 }, { -1, -1, -1 } },
            { { 9,  10, 2 },  { 0,  9,  2 },  { -1, -1, -1 }, { -1, -1, -1 }, { -1, -1, -1 } },
            { { 2,  3,  8 },  { 2,  8,  10 }, { 0,  1,  8 },  { 1,  10, 8 },  { -1, -1, -1 } },
            { { 1,  10, 2 },  { -1, -1, -1 }, { -1, -1, -1 }, { -1, -1, -1 }, { -1, -1, -1 } },
            { { 1,  3,  8 },  { 9,  1,  8 },  { -1, -1, -1 }, { -1, -1, -1 }, { -1, -1, -1 } },
            { { 0,  9,  1 },  { -1, -1, -1 }, { -1, -1, -1 }, { -1, -1, -1 }, { -1, -1, -1 } },
            { { 0,  3,  8 },  { -1, -1, -1 }, { -1, -1, -1 }, { -1, -1, -1 }, { -1, -1, -1 } },
            { { -1, -1, -1 }, { -1, -1, -1 }, { -1, -1, -1 }, { -1, -1, -1 }, { -1, -1, -1 } },
    };
}